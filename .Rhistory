knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library( fields))
set.seed(123)
N <- 150
s <- runif(N)
s <- sort(s)
# asymetric bump function is the true curve
true <-  9 * s * (1 - s) ^ 3
errors<- .1 * rnorm(N)
y <-  true + errors
EffDF<- rep( NA, 200)
MSE1<- rep( NA, 200)
MSE2<- rep( NA, 200)
set.seed(498)
errors<-  matrix( .1 * rnorm(N*200), N, 200)
Y <-  true + errors
for( k in 1:200)
{
fitObjFixed<- Tps(s,Y[,k],df=5)
fitObjGCV<- Tps(s,Y[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatFixed<- predict( fitObj5)
fHatGCV<- predict( fitObjGCV)
MSE1[k]<- mean(  ( true - fHatFixed)^2 )
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
EffDF<- rep( NA, 200)
MSE1<- rep( NA, 200)
MSE2<- rep( NA, 200)
set.seed(498)
errors<-  matrix( .1 * rnorm(N*200), N, 200)
Y <-  true + errors
for( k in 1:200)
{
fitObjFixed<- Tps(s,Y[,k],df=5)
fitObjGCV<- Tps(s,Y[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatFixed<- predict( fitObjFixed)
fHatGCV<- predict( fitObjGCV)
MSE1[k]<- mean(  ( true - fHatFixed)^2 )
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
hist(EffDF)
abline(v=5,col="blue",lwd=2)
plot(MSE1, main = "MSE1 vs MSE2", xlab= Points,ylab = MSE)
plot(MSE1, main = "MSE1 vs MSE2", xlab= "Points",ylab = "MSE")
points(MSE2)
plot(MSE1, main = "MSE1 vs MSE2", xlab= "Points",ylab = "MSE", col="Blue")
points(MSE2)
plot(MSE1, main = "MSE1 vs MSE2", xlab= "Points",ylab = "MSE", col="Blue")
points(MSE2, col="Red")
plot(MSE1, main = "MSE1 vs MSE2", xlab= "Points",ylab = "MSE", col="Blue")
points(MSE2, col="Red")
legend("topleft", legend = c("Blue = MSE1", "Red = MSE2"))
load("GOzone2021.rda")
library( lubridate)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
dim( O3)
ind<-  colSums( is.na(O3)) ==0
O3<- O3[ ind,]
tday<- 1:365
tday<- tday[ind]
O3<- t( O3)
dim( O3)
sHour<- 0:23
boxplot(t(tday))
boxplot((tday))
boxplot(t(tday))
for( k in 1:200)
{
fitObjGCV<- Tps(s,Y[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(s,Y[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
plot(MSE2)
plot(EffDF)
plot(EffDF)
min(EffDF)
plot(EffDF)
which.max(EffDF)
plot(tday[17])
plot(tday[256])
boxplot(tday[17])
boxplot(tday[256])
boxplot(tday[17])
boxplot(tday[257])
boxplot(tday[17])
boxplot(tday[198])
meanO3<- rowMeans(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(s,tday[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(s,y[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(s,O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(tday,O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,t(O3[,k])
EffDF[k]<- fitObjGCV$eff.df
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,t(O3[k,])
EffDF[k]<- fitObjGCV$eff.df
O3=t(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,t(O3[k,])
EffDF[k]<- fitObjGCV$eff.df
O3=t(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3[k,])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
O3=t(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3)
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
O3=t(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(s,O3)
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
load("GOzone2021.rda")
library( lubridate)
O3<- matrix( NA, nrow=365, ncol=24)
O3[ cbind(GOzone2021$day, GOzone2021$hour+1) ]<- GOzone2021$O3
dim( O3)
ind<-  colSums( is.na(O3)) ==0
O3<- O3[ ind,]
tday<- 1:365
tday<- tday[ind]
O3<- t( O3)
dim( O3)
sHour<- 0:23
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3)
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
MSE2[k]<- mean(  ( true - fHatGCV)^2 )
}
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,O3[,k])
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
}
meanO3<- rowMeans(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,meanO3)
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
}
meanO3<- rowMeans(O3)
for( k in 1:200)
{
fitObjGCV<- Tps(sHour,meanO3)
EffDF[k]<- fitObjGCV$eff.df
fHatGCV<- predict( fitObjGCV)
}
plot(fitObjGCV)
points(meanO3)
